analyze_job_task:
  description: >
    Analyze the job description from the provided knowledge source and score the candidate's fit based on their resume.
    Output will be saved as structured JSON data.

    1. Extract Requirements:
       - Technical skills (required vs nice-to-have)
       - Soft skills
       - Experience levels
       - Education requirements
       - Industry knowledge

    2. Score Technical Skills (35% of total):
       - For each required skill:
         * Match Level (0-1): How well does candidate's experience match?
         * Years Experience: Compare to required years
         * Context Score: How relevant is their usage of the skill?
       - Calculate weighted average based on skill importance

    3. Score Soft Skills (20% of total):
       - Identify soft skills from resume
       - Compare against job requirements
       - Consider context and demonstration of skills

    4. Score Experience (25% of total):
       - Years of relevant experience
       - Role similarity
       - Industry relevance
       - Project scope and complexity

    5. Score Education (10% of total):
       - Degree level match
       - Field of study relevance
       - Additional certifications

    6. Score Industry Knowledge (10% of total):
       - Years in similar industry
       - Domain expertise
       - Industry-specific achievements

    7. Calculate Overall Score:
       - Weighted average of all components
       - Identify key strengths and gaps
       - Provide detailed scoring explanation

  expected_output: >
    Structured JSON data containing job analysis and scoring details according to
    the JobRequirements model schema.
  agent: job_analyzer

optimize_resume_task:
  description: >
    Review the provided resume against the job analysis and create structured optimization suggestions.
    Output will be saved as structured JSON data.

    1. Content Analysis:
       - Compare resume content with job requirements
       - Identify missing keywords and skills
       - Analyze achievement descriptions
       - Check for ATS compatibility

    2. Structure Review:
       - Evaluate section organization
       - Check formatting consistency
       - Assess information hierarchy
       - Evaluate what sections or items in the resume are irrelevant or unrelated to the job description, and do not add any value from the point of view of the recuiter

    3. Generate Suggestions:
       - Content improvements with before/after examples that only rephrase verified details from the resume. Do not introduce new skills, metrics, or claims that are not present in the original resume.
       - Skills to highlight based on job match
       - Achievements to add or modify
       - Sections or items to remove, since they are irrelevant for the role
       - ATS optimization recommendations

  expected_output: >
    Structured JSON data containing detailed optimization suggestions according to
    the ResumeOptimization model schema.
  agent: resume_analyzer
  context: [analyze_job_task]

generate_resume_task:
  description: >
    Using the provided resume from knowledge sources, apply the optimization suggestions from previous steps, to
    create a polished resume in markdown format.
    Do not add markdown code blocks like '```'.

    IMPORTANT: Target approximately {TARGET_RESUME_WORDS} words for the resume content. 
    Prioritize quality and completeness while staying close to this target.

    1. Content Integration:
       - Incorporate optimization suggestions
       - Add missing keywords and skills
       - Enhance achievement descriptions
       - Ensure ATS compatibility

    2. Formatting:
       - Use proper markdown headers (#, ##, ###)
       - Apply consistent styling
       - Create clear section hierarchy
       - Use bullet points effectively

  expected_output: >
    A beautifully formatted markdown resume document that:
    - Incorporates all optimization suggestions
    - Uses proper markdown formatting
    - Is ATS-friendly
  agent: resume_writer
  context: [optimize_resume_task]

verify_resume_task:
  description: >
    Cross-reference the optimized resume against the original CV to ensure factual accuracy.
    Remove any hallucinated, embellished, or unverifiable content.

    CRITICAL OUTPUT REQUIREMENTS:
    - Output ONLY the markdown resume content
    - DO NOT include ANY introductory text (e.g., "Here is the resume:", "Below is the verified resume:")
    - DO NOT include ANY concluding remarks (e.g., "This resume will...", "Good luck with...")
    - DO NOT include ANY meta-commentary or explanations
    - The output must start directly with the resume header/title
    - The output must end with the last line of the resume content

    1. Fact Verification Process:
       - Compare every claim in the optimized resume against the original CV
       - Verify job titles, dates, company names match exactly
       - Confirm all skills listed appear in the original CV
       - Validate all achievements and accomplishments are sourced from original
       - Check education credentials, certifications, and qualifications

    2. Content Removal Rules:
       - Remove ANY content that cannot be directly verified in the original CV
       - Delete embellished or exaggerated claims
       - Eliminate hallucinated experiences, skills, or achievements
       - Strip out inferred qualifications not explicitly stated in original

    3. Preserve Original Facts:
       - Keep all content that accurately reflects the original CV
       - Maintain the formatting and structure from the optimized version
       - Preserve keyword optimizations that are factually accurate

  expected_output: >
    Pure markdown resume content with absolute factual accuracy. The output must be
    ONLY the resume in markdown format - no introductions, no conclusions, no commentary.
    Every single claim must be verifiable against the original CV.
  agent: fact_checker
  context: [generate_resume_task]

generate_report_task:
  description: >
    Create an executive summary report using data from previous steps.
    Format in markdown without code blocks '```'. The output must be
    ONLY the report in markdown format - no introductions, no conclusions, no commentary.

    1. Data Integration:
       - Job analysis and scores
       - Resume optimization details
       - Final resume changes

    2. Report Sections:
       ## Executive Summary
       - Overall match score and quick wins
       - Key strengths and improvement areas
       - Action items priority list

       ## Job Fit Analysis
       - Detailed score breakdown
       - Skills match assessment
       - Experience alignment

       ## Optimization Overview
       - Key resume improvements
       - ATS optimization results
       - Impact metrics

       ## Next Steps
       - Prioritized action items
       - Skill development plan
       - Application strategy

    3. Formatting:
       - Use proper markdown headers
       - Include relevant emojis
       - Create tables where appropriate
       - Use bullet points for scannability

  expected_output: >
    A comprehensive markdown report that combines all analyses into an
    actionable, clear document with concrete next steps.
  agent: report_generator
  context: [analyze_job_task, optimize_resume_task]

harvard_format_task:
  description: >
    **CRITICAL - DATA SOURCE PRIORITY:**
    You have access to TWO sources of resume data:
    1. The verified resume (from verify_resume_task context) ← **USE THIS ONE ONLY**
    2. The original resume (from knowledge sources) ← **IGNORE THIS COMPLETELY**

    YOU MUST USE **ONLY** THE VERIFIED RESUME from the task context (verify_resume_task).
    DO NOT use, reference, or mix any content from the original resume knowledge source.
    The original resume is available for other agents but you must IGNORE IT ENTIRELY.
    If you find yourself accessing knowledge sources or the original PDF, STOP - you are
    doing this task incorrectly. Use ONLY the verified_resume.md content from context.

    Parse the verified markdown resume and structure it into Harvard format
    with precise data extraction. Extract job title from the job analysis.

    CRITICAL: This task is ONLY to reformat the content from the verified resume
    into the required structured format. ALL information must be preserved - no
    content should be lost or omitted. The output must contain the same content
    as the input, just structured differently according to the HarvardFormattedResume
    schema. Every section present in the verified resume must be captured in the
    appropriate fields.

    1. Extract Metadata:
       - Candidate's full name from the first heading (# Name)
       - Contact information line (email, LinkedIn, GitHub, location, etc.)
       - Job title from the job_analysis context (job_title field)
       - Summary/Objective: Extract from "## Summary" section if present in the
         verified resume. If no summary section exists, set to null. Do not create
         or infer a summary if it's not in the source document.

    2. Parse Work Experience:
       For each work experience entry, extract:
       - Institution/Company name
       - Location (City, State/Country or "Remote")
       - Role(s) held (can be multiple if promoted)
       - Start date (format: "Month YYYY" like "July 2022")
       - End date (format: "Month YYYY" or "Present")
       - List of achievements/responsibilities as bullet points
       - Identify 3-5 keywords per experience that should be bolded for emphasis
         (technical skills, tools, metrics, key achievements)

    3. Parse Education:
       For each education entry, extract:
       - Institution name
       - Location (or "Online" if remote)
       - Degree/diploma title
       - Start year (if available)
       - End year (if available, can be same as start for single-year programs)
       - Additional info like GPA, honors, thesis (if mentioned)

    4. Parse Certifications:
       For each certification, extract:
       - Year obtained
       - Certification/course name
       - Provider/issuing organization
       - Grade or level (if mentioned, e.g., "C2 Proficient", "Grade A")

    5. Parse Additional Sections (with Mixed Content Support):
       - Skills: organize by category (Technical Skills, Soft Skills, etc.)
       - Languages, Projects, and Additional Sections: Use mixed content format

       MIXED CONTENT FORMAT:
       Each section (languages, projects, additional_sections) should be structured
       as a LIST of content blocks, where each block is EITHER:
         * A string (str): Represents a paragraph of text
         * A list of strings (List[str]): Represents a bullet list

       Example for a section with intro + bullets + outro:
       [
         "Intro paragraph text here",        # paragraph block
         [                                    # bullet list block
           "First bullet point",
           "Second bullet point"
         ],
         "Outro paragraph text here"         # paragraph block
       ]

       Example for a simple list-only section:
       [
         [                                    # bullet list block
           "Item 1",
           "Item 2"
         ]
       ]

       This preserves the original structure and prevents "double listing" issues.

    CRITICAL: Ensure all dates, names, and facts match exactly what is in the
    verified resume. Do not infer or add information not present in the source.

  expected_output: >
    Structured JSON data containing the resume in HarvardFormattedResume
    format with all sections properly parsed and metadata extracted.
  agent: harvard_formatter
  context: [verify_resume_task]
