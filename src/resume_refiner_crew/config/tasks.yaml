parse_resume_task:
  description: >
    Use the PDFSearchTool to access and extract content from the resume PDF at: {RESUME_PDF_PATH}

    Your goal is to parse the entire resume content and convert it to clean, well-structured markdown format with proper headings and formatting.

    Ensure the markdown output:
    - Uses proper markdown heading hierarchy (# for main title, ## for sections, ### for subsections)
    - Preserves all resume sections (contact info, summary, experience, education, skills, etc.)
    - Maintains proper formatting for lists, dates, and other content
    - Is clean and professionally formatted

    CRITICAL OUTPUT REQUIREMENTS:
    - Output ONLY the parsed markdown resume content
    - DO NOT include ANY introductory text (e.g., "Here is the resume:", "I parsed the PDF:")
    - DO NOT include ANY concluding remarks or explanations
    - DO NOT include ANY meta-commentary about the parsing process
    - The output must be the pure markdown content, starting with the resume header

  expected_output: >
    Pure markdown text of the complete resume with proper structure and formatting.
    No introductions, no conclusions, no commentary - only the parsed content.

analyze_job_task:
  description: >
    Analyze the job description from the provided knowledge source and score the candidate's fit based on their resume.
    Output will be saved as structured JSON data.

    1. Extract Requirements:
       - Technical skills (required vs nice-to-have)
       - Soft skills
       - Experience levels
       - Education requirements
       - Industry knowledge

    2. Score Technical Skills (35% of total):
       - For each required skill:
         * Match Level (0-1): How well does candidate's experience match?
         * Years Experience: Compare to required years
         * Context Score: How relevant is their usage of the skill?
       - Calculate weighted average based on skill importance

    3. Score Soft Skills (20% of total):
       - Identify soft skills from resume
       - Compare against job requirements
       - Consider context and demonstration of skills

    4. Score Experience (25% of total):
       - Years of relevant experience
       - Role similarity
       - Industry relevance
       - Project scope and complexity

    5. Score Education (10% of total):
       - Degree level match
       - Field of study relevance
       - Additional certifications

    6. Score Industry Knowledge (10% of total):
       - Years in similar industry
       - Domain expertise
       - Industry-specific achievements

    7. Calculate Overall Score:
       - Weighted average of all components
       - Identify key strengths and gaps
       - Provide detailed scoring explanation

  expected_output: >
    Structured JSON data containing job analysis and scoring details according to
    the JobRequirements model schema.

optimize_resume_task:
  description: >
    Review the provided resume against the job analysis and create structured optimization suggestions.
    Output will be saved as structured JSON data.

    1. Content Analysis:
       - Compare resume content with job requirements
       - Identify missing keywords and skills
       - Analyze achievement descriptions
       - Check for ATS compatibility

    2. Structure Review:
       - Evaluate section organization
       - Check formatting consistency
       - Assess information hierarchy
       - Identify non-standard section names and suggest renaming to standard names (e.g., "Professional Summary" → "Summary", "Work History" → "Work Experience", "Technical Skills" → "Skills")
       - A summary section should be present, with professional tone and tailored to the job description
       - Identify sections or items that are irrelevant to the job description:
         * Sections/items with zero keywords matching the job requirements
         * Experiences or skills from completely unrelated industries or domains
         * Outdated, overly basic, or commodity skills that don't differentiate the candidate
         * Hobbies, personal interests, or generic statements that don't demonstrate job-relevant competencies
         * For each irrelevant item, provide explicit removal suggestion with justification explaining why it doesn't add value to the recruiter

    3. Generate Suggestions:
       - Content improvements with before/after examples that only rephrase verified details from the resume. Do not introduce new skills, metrics, or claims that are not present in the original resume.
       - Skills to highlight based on job match
       - Achievements to add or modify
       - Sections or items to remove, since they are irrelevant for the role
       - ATS optimization recommendations

  expected_output: >
    Structured JSON data containing detailed optimization suggestions according to
    the ResumeOptimization model schema.

generate_resume_task:
  description: >
    Using the provided resume from context, apply the optimization suggestions from previous steps, to
    create a polished resume in markdown format.
    Do not add markdown code blocks like '```'.

    CRITICAL: Target approximately {TARGET_RESUME_WORDS} words for the resume content.
    You MUST use the Word Counter and Target Checker tool iteratively to ensure the final
    resume meets this target.

    WORKFLOW:

    1. Initial Draft Creation:
       - Incorporate optimization suggestions
       - Add missing keywords and skills
       - Enhance achievement descriptions
       - Ensure ATS compatibility
       - Create clear section hierarchy with proper markdown headers (#, ##, ###)
       - Apply consistent styling and effective bullet points

    2. Iterative Word Count Checking (REQUIRED):
       a) Use the "Word Counter and Target Checker" tool with your current resume draft as text.
          The tool automatically reads the target word count from configuration.
          Example: Call the tool with just the text parameter (your resume markdown).

       b) Check the tool's output, specifically the "is_within_target" flag:
          - If is_within_target = True: You're done! The resume is within acceptable range (85%-115% of target)
          - If is_within_target = False: Proceed to step c

       c) Adjust the resume based on word_count vs target_word_count:

          IF word_count > target_word_count (TOO LONG):
          - Remove sections or items that were flagged as irrelevant in the optimization suggestions
          - Rephrase content more concisely while preserving key information
          - Prioritize removing the least relevant content first

          IF word_count < target_word_count (TOO SHORT):
          - Incorporate additional items from less relevant sections (if available)
          - Expand on existing descriptions with more detail
          - NEVER invent new information - only add details from the original resume

       d) After adjustments, use the Word Counter tool again to check progress

       e) Repeat steps b-d until is_within_target = True

    3. Final Quality Check:
       - Ensure all content is factually accurate
       - Verify ATS compatibility is maintained
       - Confirm markdown formatting is clean and professional

  expected_output: >
    A beautifully formatted markdown resume document that:
    - Incorporates all optimization suggestions
    - Uses proper markdown formatting
    - Is ATS-friendly
    - Has word count within 85%-115% of {TARGET_RESUME_WORDS} words (as verified by the Word Counter tool)

verify_resume_task:
  description: >
    Cross-reference the optimized resume against the original resume to ensure factual accuracy (source of truth is the original resume).
    Remove any hallucinated, embellished, or unverifiable content. If everything is correct, then return the optimized resume without changes.
    If you encounter a mismatch, fix it with the minimal changes possible.

    CRITICAL OUTPUT REQUIREMENTS:
    - Output ONLY the markdown resume content
    - DO NOT include ANY extra commentary
    - Make the minimal changes to the optimized resume to ensure accuracy
    - DO NOT add additional information to the optimized resume, even if it is in the original one

    1. Fact Verification Process:
       - Compare every claim in the optimized resume against the original resume
       - Verify job titles, dates, company names match exactly
       - If the original resume has additional information not present in the optimized one, DO NOT add it

    2. Content Removal Rules:
       - Remove ANY content that cannot be directly verified in the original resume
       - Delete embellished or exaggerated claims
       - Eliminate hallucinated experiences, skills, or achievements
       - Strip out inferred qualifications not explicitly stated in original

    3. Preserve Original Facts:
       - Maintain the formatting and structure from the optimized version
       - Preserve keyword optimizations that are factually accurate

  expected_output: >
    Pure markdown resume content with absolute factual accuracy. The output must be
    ONLY the resume in markdown format - no introductions, no conclusions, no commentary.
    Every single claim must be verifiable against the original resume.

harvard_format_task:
  description: >
    Parse the verified markdown resume and structure it into Harvard format
    with precise data extraction.

    CRITICAL: This task is ONLY to reformat the content from the verified resume
    into the required structured format. ALL information must be preserved - no
    content should be lost or omitted. The output must contain the same content
    as the input, just structured differently according to the HarvardFormattedResume
    schema. Every section present in the verified resume must be captured in the
    appropriate fields.

    1. Extract Metadata:
       - Candidate's full name from the first heading (# Name)
       - Contact information line (email, LinkedIn, GitHub, location, etc.)
       - Summary/Objective: Extract from "## Summary" section if present in the
         verified resume. If no summary section exists, set to null. Do not create
         or infer a summary if it's not in the source document.

    2. Parse Work Experience:
       For each work experience entry, extract:
       - Institution/Company name
       - Location (City, State/Country or "Remote")
       - Role(s) held (can be multiple if promoted)
       - Start date (format: "Month YYYY" like "July 2022")
       - End date (format: "Month YYYY" or "Present")
       - List of achievements/responsibilities as bullet points
       - Identify 3-5 keywords per experience that should be bolded for emphasis
         (technical skills, tools, metrics, key achievements)

    3. Parse Education:
       For each education entry, extract:
       - Institution name
       - Location (or "Online" if remote)
       - Degree/diploma title
       - Start year (if available)
       - End year (if available, can be same as start for single-year programs)
       - Additional info like GPA, honors, thesis (if mentioned)

    4. Parse Certifications:
       For each certification, extract:
       - Year obtained
       - Certification/course name
       - Provider/issuing organization
       - Grade or level (if mentioned, e.g., "C2 Proficient", "Grade A")

    5. Parse Additional Sections (with Mixed Content Support):
       - Skills: organize by category (Technical Skills, Soft Skills, etc.)
       - Languages, Projects, and Additional Sections: Use mixed content format

       MIXED CONTENT FORMAT:
       Each section (languages, projects, additional_sections) should be structured
       as a LIST of content blocks, where each block is EITHER:
         * A string (str): Represents a paragraph of text
         * A list of strings (List[str]): Represents a bullet list

       Example for a section with intro + bullets + outro:
       [
         "Intro paragraph text here",        # paragraph block
         [                                    # bullet list block
           "First bullet point",
           "Second bullet point"
         ],
         "Outro paragraph text here"         # paragraph block
       ]

       Example for a simple list-only section:
       [
         [                                    # bullet list block
           "Item 1",
           "Item 2"
         ]
       ]

       This preserves the original structure and prevents "double listing" issues.

    CRITICAL: Ensure all dates, names, and facts match exactly what is in the
    verified resume. Do not infer or add information not present in the source.

  expected_output: >
    Structured JSON data containing the resume in HarvardFormattedResume
    format with all sections properly parsed and metadata extracted.

generate_report_task:
  description: >
    Create an executive summary report using data from previous steps.
    Format in markdown without code blocks '```'. The output must be
    ONLY the report in markdown format - no introductions, no conclusions, no commentary.

    1. Data Integration:
       - Job analysis and scores
       - Resume optimization details
       - Final resume changes

    2. Report Sections:
       ## Executive Summary
       - Overall match score and quick wins
       - Key strengths and improvement areas
       - Action items priority list

       ## Job Fit Analysis
       - Detailed score breakdown
       - Skills match assessment
       - Experience alignment

       ## Optimization Overview
       - Key resume improvements
       - ATS optimization results
       - Impact metrics

       ## Next Steps
       - Prioritized action items
       - Skill development plan
       - Application strategy

    3. Formatting:
       - Use proper markdown headers
       - Include relevant emojis
       - Create tables where appropriate
       - Use bullet points for scannability

  expected_output: >
    A comprehensive markdown report that combines all analyses into an
    actionable, clear document with concrete next steps.